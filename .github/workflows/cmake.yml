name: CMake Build Matrix

on: [push, pull_request]

env:
  CMAKE_VERSION: 3.18.3
  NINJA_VERSION: 1.10.1
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.2.1

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.7z",
            os: windows-latest,
            cc: "cl", cxx: "cl"
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.7z",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS.7z",
            os: macos-latest,
            cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ github.token }}
    - name: Set up windows tools
      if: startsWith(matrix.config.os, 'windows')
      uses: ilammy/msvc-dev-cmd@v1
    - name: Set up ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.9
      with:
        cmake-version: '3.16.x'
    - name: Set up python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install python deps
      run: |
        python -m pip install --upgrade pip
        python -m pip install aqtinstall
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.15.2
        target: desktop
        modules: qtcharts
        dir: ${{ github.workspace }}/qt
    - name: Print Qt
      run: echo $Qt5_DIR
    - name: Download libzmq
      run: |
        mkdir libzmq
        cd libzmq
        mkdir src
        mkdir build
        mkdir install
        git clone https://github.com/zeromq/libzmq.git src
        cd ../
    - name: Download zmqpp
      run: |
        mkdir zmqpp
        cd zmqpp
        mkdir src
        mkdir build
        mkdir install
        git clone https://github.com/zeromq/zmqpp.git src
        cd ../
    - name: Build libzmq
      run: |
        cd libzmq
        cd build
        cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED=ON -DBUILD_STATIC=ON -DBUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/libzmq/install" -DCMAKE_DISABLE_PRECOMPILE_HEADERS=OFF -DENABLE_PRECOMPILED=OFF -DCMAKE_C_COMPILER="${{matrix.config.cc}}" -DCMAKE_CXX_COMPILER="${{matrix.config.cxx}}" ../src
        ninja
        ninja install
        cd ../../
    - name: Build zmqpp
      run: |
        cd .github
        cd cmake
        cd zmqpp
        mkdir build
        cd build
        cmake -GNinja -DZMQPP_LOC="${{ github.workspace }}/zmqpp" -DCMAKE_PREFIX_PATH="${{ github.workspace }}/libzmq/install" -DCMAKE_C_COMPILER="${{matrix.config.cc}}" -DCMAKE_CXX_COMPILER="${{matrix.config.cxx}}" ../
        ninja
        cd ../../../../

    - name: Build TwitFil
      run: |
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_PREFIX_PATH="${{ github.workspace }}/libzmq/install;${{ github.workspace }}/zmqpp/install" -DCMAKE_C_COMPILER="${{matrix.config.cc}}" -DCMAKE_CXX_COMPILER="${{matrix.config.cxx}}" ../
        ninja
        cd ../

    - name: Pack
      working-directory: build
      run: cmake -E tar cfv ../${{ matrix.config.artifact }} --format=7zip install/

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.7z",
            os: ubuntu-latest
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.7z",
            os: ubuntu-latest
          }
#        - {
#            name: "macOS Latest Clang", artifact: "macOS.7z",
#            os: ubuntu-latest
#          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar
